import asyncio
import time

from aiogram import Bot
from aiogram import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

from aiogram import types
import random
import string
#from config import *
from key_boards import *
from FSMClasses import *

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from data_base.db_users import UsersDB
from data_base.db_statement import StatementsDB
from data_base.db_requests import RequestDB
from data_base.db_photos import PhotosDB

storage = MemoryStorage()

bot = Bot(token='5344363786:AAE4qn8hr5NgAQYexfWYHVikLXm8G6dsTn4')

dispatcher = Dispatcher(bot=bot, storage=storage)

ADMIN_IDS = [899951880]


users_db = UsersDB('data_base/compass.db')
statement_db = StatementsDB('data_base/compass.db')
requests_db = RequestDB('data_base/compass.db')
photos_db = PhotosDB('data_base/compass.db')


async def send_menu(message: types.Message):
    text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é <code>Soul Compass Bot</code> üòå'
    await bot.send_message(message.chat.id, text=text, reply_markup=inline_markup_menu(), parse_mode='HTML')


async def edit_to_menu(message: types.Message):
    text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é <code>Soul Compass Bot</code> üòå'
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=text, reply_markup=inline_markup_menu(), parse_mode='HTML')


async def send_moderator_menu(message: types.Message):
    text = '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é'
    await bot.send_message(message.chat.id, text=text, reply_markup=inline_markup_admin_menu())


async def edit_to_moderator_menu(message: types.Message):
    text = '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é'
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=text, reply_markup=inline_markup_admin_menu())


async def clear_state(state: FSMContext):
    try:
        current_state = state.get_state()
        if current_state is not None:
            await state.finish()
    except Exception as error:
        print(error)


def get_name(message: types.Message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    name = ''
    if first_name is not None:
        name += first_name
        name += ' '
    if last_name is not None:
        name += last_name
        name += ' '
    if username is not None:
        name += '@'
        name += username

    return name


@dispatcher.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state=[FSMAdmin.change_statement, FSMAdmin.add_admin, FSMAdmin.sharing])
async def cancel_handler(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, '<i>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</i> ‚Ü©', reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
    await clear_state(state)
    await send_moderator_menu(message)
    await FSMAdmin.admin_opps.set()


@dispatcher.message_handler(Text(equals='–Ω–∞–∑–∞–¥', ignore_case=True), state=[FSMReply.reply_message, FSMReply.request_id, FSMReply.payment_id, FSMReply.message, FSMReply.success_payment])
async def cancel_handler(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, '<i>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</i> ‚Ü©', reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
    await clear_state(state)
    await send_menu(message)


@dispatcher.message_handler(commands=['start'])
async def start(message: types.Message):
    if not users_db.user_exists(message.chat.id):
        users_db.add_user(message.chat.id, get_name(message))

        text = 'üßô‚Äç‚ôÇÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥–æ—Ä–æ–≥–æ–π –ø—É—Ç–Ω–∏–∫! –¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –±–æ—Ç–µ –∫—É—Ä—Å–∞ "–ö–æ–º–ø–∞—Å –î—É—à–∏". –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫—É—Ä—Å—É –∏ –∑–∞–¥–∞—Ç—å –ª–∏—á–Ω–æ –≤–æ–ø—Ä–æ—Å –º—É–¥—Ä–µ—Ü—É. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é!'
        await bot.send_message(message.chat.id, text)

        #text = '–î–æ—Ä–æ–≥–æ–π –ø—É—Ç–Ω–∏–∫, –ø–æ–∫–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —à–æ–∫–æ–ª–∞–¥–æ–∫ –≤ –Ω–∞—à–µ–º —Ü–∞—Ä—Å—Ç–≤–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨ –º–µ—Å—Ç–æ –Ω–∞ –∫—É—Ä—Å–µ –ø–æ —Ü–µ–Ω–∞–º –≤–µ–±–∏–Ω–∞—Ä–∞  —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ä–∞–∑–∏–º—Å—è —Å –±–æ–ª—å—à–∏–º –±–æ—Å—Å–æ–º.'
        #await bot.send_message(message.chat.id, text=text)

        text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {str(users_db.get_name(message.chat.id))} –ø–µ—Ä–µ—à–µ–ª –≤ –±–æ—Ç–∞'
        for i in users_db.get_users_by_admin_right('admin'):
            await bot.send_message(chat_id=int(i[0]), text=text)

    await send_menu(message)


@dispatcher.callback_query_handler()
async def get_callback(call: types.CallbackQuery):
    if call.data == 'payment':
        text = '–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòÉ'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rates(statement_db))
        await FSMUser.choose_rate.set()
    elif call.data == 'installment':
        text = '–í–Ω–∏–º–∞–Ω–∏–µ! –£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∞—Ä–∏—Ñ–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è!\n\n–ü–µ—Ä–≤—ã–π —Ç–∞—Ä–∏—Ñ - –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –¥–≤–∞ –ø–ª–∞—Ç–µ–∂–∞: 50% —Å—Ä–∞–∑—É, 50% –≤ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞ (—Å 29 –∞–≤–≥—É—Å—Ç–∞ –ø–æ 5 —Å–µ–Ω—Ç—è–±—Ä—è)\n\n–í—Ç–æ—Ä–æ–π —Ç–∞—Ä–∏—Ñ - –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –¥–æ 4—Ö —Ä–∞–∑: 40% —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞.\n\n–¢—Ä–µ—Ç–∏–π —Ç–∞—Ä–∏—Ñ - –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –¥–æ 4—Ö —Ä–∞–∑: 40% —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞.\n\n–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞–º –±–æ–ª—å—à–µ? ‚ò∫'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rates(statement_db))
        await FSMUser.choose_rate_installment_payment.set()
    elif call.data == 'questions':
        await get_questions(call.message)
    elif call.data == 'support':
        if not requests_db.user_exists(call.message.chat.id):
            await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', reply_markup=reply_markup_call_off('–ù–∞–∑–∞–¥'))
            await FSMReply.message.set()
        else:
            text = '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞, –≤ —Å–∫–æ—Ä–µ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è'
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_back('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    elif call.data == 'book_rate':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 1000 –†—É–±–ª–µ–π. –ë—Ä–æ–Ω—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3—Ö –¥–Ω–µ–π. –í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é —Å—É–º–º—É, –ª–∏–±–æ —á–∞—Å—Ç—å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞—Å—Å—Ä–æ—á–∫–∏. ‚Ñπ'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rates(statement_db))
        await FSMUser.choose_rate_book.set()
    elif call.data == 'back':
        print(1)
        await edit_to_menu(call.message)
    elif call.data == 'reply_message':
        await bot.send_message(call.message.chat.id, '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', reply_markup=reply_markup_call_off('–ù–∞–∑–∞–¥'))
        await FSMReply.request_id.set()
    elif call.data == 'check_payment':
        await bot.send_message(call.message.chat.id, '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å', reply_markup=reply_markup_call_off('–ù–∞–∑–∞–¥'))
        await FSMReply.payment_id.set()


@dispatcher.callback_query_handler(state=FSMUser.choose_rate)
async def get_rate(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        await clear_state(state)
        await edit_to_menu(call.message)
    elif call.data == 'first_rate':
        async with state.proxy() as file:
            file['rate'] = 'first'
        text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_first_rate_name()}</b>' + '\n\n'
        text += statement_db.get_first_rate_descr() + '\n\n'
        text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>54900‚ÇΩ</s> <b>{statement_db.get_first_rate_price()}‚ÇΩ</b>'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rate_opps_client(), parse_mode='HTML')
        await FSMUser.payment_type.set()
    elif call.data == 'second_rate':
        async with state.proxy() as file:
            file['rate'] = 'second'
        text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_second_rate_name()}</b>' + '\n\n'
        text += statement_db.get_second_rate_descr() + '\n\n'
        text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>69900‚ÇΩ</s> <b>{statement_db.get_second_rate_price()}‚ÇΩ</b>'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rate_opps_client(), parse_mode='HTML')
        await FSMUser.payment_type.set()
    elif call.data == 'third_rate':
        async with state.proxy() as file:
            file['rate'] = 'third'
        text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_third_rate_name()}</b>' + '\n\n'
        text += statement_db.get_third_rate_descr() + '\n\n'
        text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>89900‚ÇΩ</s> <b>{statement_db.get_third_rate_price()}‚ÇΩ</b>'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rate_opps_client(), parse_mode='HTML')
        await FSMUser.payment_type.set()


@dispatcher.callback_query_handler(state=FSMUser.choose_rate_installment_payment)
async def get_rate(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        await clear_state(state)
        await edit_to_menu(call.message)
    else:
        info = '–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫—É—Ä—Å–µ. –î–ª—è —ç—Ç–æ–≥–æ –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ 1000 —Ä—É–±–ª–µ–π, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å–µ–±—è —Å–∞–º—ã–µ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã. –¶–µ–Ω—ã –Ω–∞ —Ç–∞—Ä–∏—Ñ—ã –±—É–¥—É—Ç –ø–æ–≤—ã—à–∞—Ç—å—Å—è! –î–ª—è –±—Ä–æ–Ω–∏ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ‚Äù –Ω–∏–∂–µ ‚¨á.'
        text = '–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏'
        if call.data == 'first_rate':
            async with state.proxy() as file:
                file['rate'] = 'i_first'
            text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_first_rate_name()}</b>' + '\n\n'
            text += statement_db.get_first_rate_descr() + '\n\n'
            text += f'–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_first_rate_name()}</b>' + '\n\n'
            text += statement_db.get_first_rate_conditions() + '\n\n'
            text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>54900‚ÇΩ</s> <b>{statement_db.get_first_rate_price()}‚ÇΩ</b>' + '\n'
            text += f'<i>–¶–µ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞ —Å —Ä–∞—Å—Ä–æ—á–∫–æ–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞</i>: <b>{int(int(statement_db.get_first_rate_price()) * 0.5)}‚ÇΩ</b>' + '\n\n'
            text += f'<i>{info}</i>'
        elif call.data == 'second_rate':
            async with state.proxy() as file:
                file['rate'] = 'i_second'
            text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_second_rate_name()}</b>' + '\n\n'
            text += statement_db.get_second_rate_descr() + '\n\n'
            text += f'–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_second_rate_name()}</b>' + '\n\n'
            text += statement_db.get_second_rate_conditions() + '\n\n'
            text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>69900‚ÇΩ</s> <b>{statement_db.get_second_rate_price()}‚ÇΩ</b>' + '\n'
            text += f'<i>–¶–µ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞ —Å —Ä–∞—Å—Ä–æ—á–∫–æ–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞</i>: <b>{int(int(statement_db.get_second_rate_price()) * 0.4)}‚ÇΩ</b>' + '\n\n'
            text += f'<i>{info}</i>'
        elif call.data == 'third_rate':
            async with state.proxy() as file:
                file['rate'] = 'i_third'
            text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_third_rate_name()}</b>' + '\n\n'
            text += statement_db.get_third_rate_descr() + '\n\n'
            text += f'–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_third_rate_name()}</b>' + '\n\n'
            text += statement_db.get_third_rate_conditions() + '\n\n'
            text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>89900‚ÇΩ</s> <b>{statement_db.get_third_rate_price()}‚ÇΩ</b>' + '\n'
            text += f'<i>–¶–µ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞ —Å —Ä–∞—Å—Ä–æ—á–∫–æ–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞</i>: <b>{int(int(statement_db.get_third_rate_price()) * 0.4)}‚ÇΩ</b>' + '\n\n'
            text += f'<i>{info}</i>'

        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rate_installment_opps_client(), parse_mode='HTML')
        await FSMUser.payment_type.set()


@dispatcher.callback_query_handler(state=FSMUser.choose_rate_book)
async def get_rate(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        await clear_state(state)
        await edit_to_menu(call.message)
    else:
        text = ''
        if call.data == 'first_rate':
            async with state.proxy() as file:
                file['rate'] = 'b_first'
            text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_first_rate_name()}</b>' + '\n\n'
            text += statement_db.get_first_rate_descr() + '\n\n'
            text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>54900‚ÇΩ</s> <b>{statement_db.get_first_rate_price()}‚ÇΩ</b>'
        elif call.data == 'second_rate':
            async with state.proxy() as file:
                file['rate'] = 'b_second'
            text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_second_rate_name()}</b>' + '\n\n'
            text += statement_db.get_second_rate_descr() + '\n\n'
            text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>69900‚ÇΩ</s> <b>{statement_db.get_second_rate_price()}‚ÇΩ</b>'
        elif call.data == 'third_rate':
            async with state.proxy() as file:
                file['rate'] = 'b_third'
            text = f'üòã–ù–∞—á–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>{statement_db.get_third_rate_name()}</b>' + '\n\n'
            text += statement_db.get_third_rate_descr() + '\n\n'
            text += f'<i>–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:</i> <s>89900‚ÇΩ</s> <b>{statement_db.get_third_rate_price()}‚ÇΩ</b>'

        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_book(), parse_mode='HTML')
        await FSMUser.payment_type.set()


@dispatcher.callback_query_handler(state=FSMUser.payment_type)
async def get_payment_type(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        await clear_state(state)
        await edit_to_menu(message=call.message)
    elif call.data == 'get_requisites':
        if not photos_db.user_exists(call.message.chat.id):
            async with state.proxy() as file:
                rate = file['rate']
            requisites_text = '–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ:\n\n–ü–µ—Ä–µ–≤–æ–¥ –º–æ–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π –±–∞–Ω–∫ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ü–õ–ê–¢–ï–ñ –ü–û –†–ï–ö–í–ò–ó–ò–¢–ê–ú". \n–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Ü–∏—Ñ—Ä—ã, –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä—É—é—Ç—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞. \n\n–ò–ù–ù –ø–æ–ª—É—á–∞—Ç–µ–ª—è: <code>561404516940</code>\n\n–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç: <code>40802810338040008848</code>\n\n–ë–ò–ö: <code>046577964</code>\n\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: <code>–®–∏—Ö–≤–µ—Ä–¥–∏–µ–≤ –ü–∞–≤–µ–ª –≠–ª—å—Ö–∞–Ω–æ–≤–∏—á (–ò–ü)</code>\n\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: <code>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞</code> \n\n–ö–ü–ü –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –±–æ—Ç–∞. –ü–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–∫—É–ø–∫—É, –ø—É—Ç–Ω–∏–∫!'
            if rate == 'first':
                async with state.proxy() as file:
                    file['price'] = statement_db.get_first_rate_price()
                text = f'–û–ø–ª–∞—Ç–∏—Ç–µ <code>{statement_db.get_first_rate_price()}</code>‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:' + '\n\n'
                text += requisites_text + '\n\n'
                text += '<b>–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"'
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_payment(), parse_mode='HTML')
                await FSMUser.apply_payment.set()
            elif rate == 'second':
                async with state.proxy() as file:
                    file['price'] = statement_db.get_second_rate_price()
                text = f'–û–ø–ª–∞—Ç–∏—Ç–µ <code>{statement_db.get_second_rate_price()}</code>‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:' + '\n\n'
                text += requisites_text + '\n\n'
                text += '<b>–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"'
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_payment(), parse_mode='HTML')
                await FSMUser.apply_payment.set()
            elif rate == 'third':
                async with state.proxy() as file:
                    file['price'] = statement_db.get_third_rate_price()
                text = f'–û–ø–ª–∞—Ç–∏—Ç–µ <code>{statement_db.get_third_rate_price()}</code>‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:' + '\n\n'
                text += requisites_text + '\n\n'
                text += '<b>–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"'
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_payment(), parse_mode='HTML')
                await FSMUser.apply_payment.set()
            elif rate == 'i_first':
                price = int(int(statement_db.get_first_rate_price()) * 0.5)
                async with state.proxy() as file:
                    file['price'] = price
                text = f'–û–ø–ª–∞—Ç–∏—Ç–µ <code>{price}</code>‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:' + '\n\n'
                text += requisites_text + '\n\n'
                text += '<b>–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"'
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_payment(), parse_mode='HTML')
                await FSMUser.apply_payment.set()
            elif rate == 'i_second':
                price = int(int(statement_db.get_second_rate_price()) * 0.4)
                async with state.proxy() as file:
                    file['price'] = price
                text = f'–û–ø–ª–∞—Ç–∏—Ç–µ <code>{price}</code>‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:' + '\n\n'
                text += requisites_text + '\n\n'
                text += '<b>–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"'
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_payment(), parse_mode='HTML')
                await FSMUser.apply_payment.set()
            elif rate == 'i_third':
                price = int(int(statement_db.get_third_rate_price()) * 0.4)
                async with state.proxy() as file:
                    file['price'] = price
                text = f'–û–ø–ª–∞—Ç–∏—Ç–µ <code>{price}</code>‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:' + '\n\n'
                text += requisites_text + '\n\n'
                text += '<b>–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"'
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_payment(), parse_mode='HTML')
                await FSMUser.apply_payment.set()
            if rate == 'b_first' or rate == 'b_second' or rate == 'b_third':
                async with state.proxy() as file:
                    file['price'] = '1000'
                text = f'–û–ø–ª–∞—Ç–∏—Ç–µ <code>1000</code>‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:' + '\n\n'
                text += requisites_text + '\n\n'
                text += '<b>–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"'
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_payment(), parse_mode='HTML')
                await FSMUser.apply_payment.set()
        else:
            await clear_state(state)
            text = '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–¥–∏–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –≤ —Å–∫–æ—Ä–µ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è'
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_back('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    elif call.data == 'get_installment_payment':
        await clear_state(state)
        text = '–í–Ω–∏–º–∞–Ω–∏–µ! –£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∞—Ä–∏—Ñ–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è!\n\n–ü–µ—Ä–≤—ã–π —Ç–∞—Ä–∏—Ñ - –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –¥–≤–∞ –ø–ª–∞—Ç–µ–∂–∞: 50% —Å—Ä–∞–∑—É, 50% –≤ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞ (—Å 29 –∞–≤–≥—É—Å—Ç–∞ –ø–æ 5 —Å–µ–Ω—Ç—è–±—Ä—è)\n\n–í—Ç–æ—Ä–æ–π —Ç–∞—Ä–∏—Ñ - –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –¥–æ 4—Ö —Ä–∞–∑: 40% —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞.\n\n–¢—Ä–µ—Ç–∏–π —Ç–∞—Ä–∏—Ñ - –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –¥–æ 4—Ö —Ä–∞–∑: 40% —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞.\n\n–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞–º –±–æ–ª—å—à–µ? ‚ò∫'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rates(statement_db))
        await FSMUser.choose_rate_installment_payment.set()
    elif call.data == 'book_rate':

        await clear_state(state)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 1000 –†—É–±–ª–µ–π. –ë—Ä–æ–Ω—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3—Ö –¥–Ω–µ–π. –í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é —Å—É–º–º—É, –ª–∏–±–æ —á–∞—Å—Ç—å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞—Å—Å—Ä–æ—á–∫–∏.'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rates(statement_db))
        await FSMUser.choose_rate_book.set()


@dispatcher.callback_query_handler(state=FSMUser.apply_payment)
async def apply_payment(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'main_menu':
        await clear_state(state)
        await edit_to_menu(call.message)
    elif call.data == 'done':
        text = 'üßæ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É üìé‚¨á'
        await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        await FSMUser.photo.set()


@dispatcher.message_handler(content_types=['photo', 'text'], state=FSMUser.photo)
async def get_photo(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await clear_state(state)
            await send_menu(message)
    elif message.content_type == 'photo':
        numb = ''.join(random.choice(string.digits) for _ in range(random.randrange(8, 16)))

        async with state.proxy() as file:
            rate = file['rate']
            price = file['price']

        name = get_name(message)

        photos_db.add_request(numb)
        photos_db.set_user_id(numb, message.chat.id)
        photos_db.set_name(numb, name)

        rate_name = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞'
        if rate == 'first':
            rate_name = f'<b>{statement_db.get_first_rate_name()}</b>'
        elif rate == 'second':
            rate_name = f'<b>{statement_db.get_second_rate_name()}</b>'
        elif rate == 'third':
            rate_name = f'<b>{statement_db.get_third_rate_name()}</b>'
        elif rate == 'i_first':
            rate_name = f'–†–∞—Å—Å—Ä–æ—á–∫–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_first_rate_name()}"</b>'
        elif rate == 'i_second':
            rate_name = f'–†–∞—Å—Å—Ä–æ—á–∫–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_second_rate_name()}"</b>'
        elif rate == 'i_third':
            rate_name = f'–†–∞—Å—Å—Ä–æ—á–∫–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_third_rate_name()}"</b>'
        elif rate == 'b_first':
            rate_name = f'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_first_rate_name()}"</b>'
        elif rate == 'b_second':
            rate_name = f'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_second_rate_name()}"</b>'
        elif rate == 'b_third':
            rate_name = f'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_third_rate_name()}"</b>'

        for i in users_db.get_users_by_admin_right('admin'):
            text = f'–ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: <code>{numb}</code>' + '\n\n'
            text += f'–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ: {rate_name}' + '\n'
            text += f'–í–∞–º –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª <b>{price}‚ÇΩ</b>' + '\n'

            text += f'–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {str(name)}'

            try:
                await bot.send_photo(chat_id=int(i[0]), photo=message.photo[-1].file_id, caption=text, reply_markup=inline_markup_check_payment(), parse_mode='HTML')
            except Exception as e:
                print(e)

        text = '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É! –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –Ω–∞—á–Ω—ë–º –Ω–∞—à –∫—É—Ä—Å ‚ò∫' + '\n\n'
        text += f'–í–∞—à –ø–ª–∞—Ç–µ–∂ #<code>{numb}</code> —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ üîé' + '\n'
        text += '<i>–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä...</i>'
        await bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
        await clear_state(state)
        await send_menu(message)


@dispatcher.message_handler(commands=['moderator'], state=['*'])
async def start_moderator(message: types.Message, state: FSMContext):
    await clear_state(state)
    for i in users_db.get_users_by_admin_right('admin'):
        if message.chat.id == int(i[0]):
            await send_moderator_menu(message)
            await FSMAdmin.admin_opps.set()


@dispatcher.callback_query_handler(state=FSMAdmin.admin_opps)
async def get_callback(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'main_menu':
        await clear_state(state)
        await edit_to_menu(call.message)
    elif call.data == 'admin_rates':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rates(statement_db))
        await FSMAdmin.get_rate.set()
    elif call.data == 'admin_installment_rates':
        pass
    elif call.data == 'admin_requisites':
        async with state.proxy() as file:
            file['status'] = 'requisites'

        text = '–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:' + '\n\n'
        requisites = statement_db.get_requisites()
        if requisites is None:
            requisites = '–£ –≤–∞—Å –∏—Ö –Ω–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'
        text += f'{requisites}' + '\n\n'
        text += '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'

        await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'))
        await FSMAdmin.change_statement.set()
    elif call.data == 'admin_questions':
        async with state.proxy() as file:
            file['status'] = 'questions'

        await get_questions_admin(call.message)
        await FSMAdmin.change_statement.set()
    elif call.data == 'sharing':
        async with state.proxy() as file:
            file['status'] = 'sharing'
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –æ—Ç–±–∏—Ä–∞—Ç—å—Å—è —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_classify_client_users_list())
        await FSMAdmin.classify_users.set()
    elif call.data == 'users_list':
        async with state.proxy() as file:
            file['status'] = 'users_list'
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –æ—Ç–±–∏—Ä–∞—Ç—å—Å—è —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_classify_client_users_list())
        await FSMAdmin.classify_users.set()
    elif call.data == 'add_admin':
        text = '–í–≤–µ–¥–∏—Ç–µ ChatID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'))
        await FSMAdmin.add_admin.set()
    elif call.data == 'reminder':
        text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞—à–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤–∞, –±—Ä–æ–Ω—å –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –¥–Ω—è, –Ω–æ –≤–æ—Ç —É–∂–µ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 2-—É—Ö –¥–Ω–µ–π. –ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π—Ç–µ —Å –æ–ø–ª–∞—Ç–æ–π)'
        count = 0
        for i in users_db.get_users_by_booking():
            if time.time() - users_db.get_seconds(int(i[0])) > 3600 * 48:
                try:
                    await bot.send_message(int(i[0]), text=text)
                    count += 1
                except Exception as e:
                    print(e)
        text = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>{count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        await bot.send_message(call.message.chat.id, text=text, parse_mode='HTML')


@dispatcher.message_handler(state=FSMAdmin.add_admin)
async def add_admin(message: types.Message, state: FSMContext):
    if users_db.user_exists(message.text):
        users_db.set_admin_right(int(message.text), 'admin')
        text = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ'
        await bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
        await send_moderator_menu(message)
        await FSMAdmin.admin_opps.set()


async def get_users_list_by_param(message: types.Message, param: str):
    text = users_db.get_users_by_type(param)
    users = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{len(text)}</b>' + '\n\n'
    for i in text:
        users += users_db.get_name(int(i[0])) + f'  <code>{int(i[0])}</code>' + '\n'
        if param == '1b_rate' or param == '2b_rate' or param == '3b_rate':
            users += time.ctime(int(users_db.get_seconds(int(i[0])))) + '\n\n'

    if len(users) > 4096:
        for x in range(0, len(users), 4096):
            await bot.send_message(message.chat.id, users[x:x+4096], parse_mode='HTML')
    else:
        await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=users, parse_mode='HTML')


async def get_all_users_list(message: types.Message):
    text = users_db.get_users()
    users = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{len(text)}</b>' + '\n\n'
    for i in text:
        users += users_db.get_name(int(i[0])) + f'  <code>{int(i[0])}</code>' + '\n'

    if len(users) > 4096:
        for x in range(0, len(users), 4096):
            await bot.send_message(message.chat.id, users[x:x+4096], parse_mode='HTML')
    else:
        await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=users, parse_mode='HTML')


@dispatcher.callback_query_handler(state=FSMAdmin.classify_users)
async def classify_users(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        await clear_state(state)
        await edit_to_moderator_menu(call.message)
        await FSMAdmin.admin_opps.set()
    else:
        async with state.proxy() as file:
            status = file['status']
        if status == 'sharing':
            async with state.proxy() as file:
                file['param'] = call.data
            text = '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'))
            await FSMAdmin.sharing.set()
        else:
            if call.data == '1_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ <b>"{statement_db.get_first_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == '2_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ <b>"{statement_db.get_second_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == '3_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ <b>"{statement_db.get_third_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == '1i_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_first_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == '2i_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_second_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == '3i_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_third_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == '1b_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_first_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == '2b_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_second_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == '3b_rate':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ —Ç–∞—Ä–∏—Ñ–∞ <b>"{statement_db.get_third_rate_name()}"</b>'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')
                await FSMAdmin.admin_back.set()
            elif call.data == 'simple':
                await get_users_list_by_param(call.message, call.data)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'))
                await FSMAdmin.admin_back.set()
            elif call.data == 'all_users':
                await get_all_users_list(call.message)
                text = f'–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞'
                await bot.send_message(call.message.chat.id, text=text, reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'))
                await FSMAdmin.admin_back.set()


@dispatcher.callback_query_handler(state=FSMAdmin.admin_back)
async def back_to_moderator_menu(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –æ—Ç–±–∏—Ä–∞—Ç—å—Å—è —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_classify_client_users_list())
        await FSMAdmin.classify_users.set()


@dispatcher.message_handler(state=FSMAdmin.sharing)
async def sharing_by_param(message: types.Message, state: FSMContext):
    async with state.proxy() as file:
        param = file['param']
    count = 0
    if param == 'all_users':
        for i in users_db.get_users():
            try:
                await bot.send_message(int(i[0]), text=message.text)
                count += 1
            except Exception as e:
                print(e)
    else:
        for i in users_db.get_users_by_type(param):
            try:
                await bot.send_message(int(i[0]), text=message.text)
                count += 1
            except Exception as e:
                print(e)

    text = '–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ' + '\n'
    text += f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{count}</b>'
    await bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
    await send_moderator_menu(message)
    await FSMAdmin.admin_opps.set()


async def get_questions_admin(message: types.Message):
    text = '–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:' + '\n\n'
    questions = statement_db.get_questions()
    if questions is None:
        questions = '–£ –≤–∞—Å –∏—Ö –Ω–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'
    text += f'{questions}' + '\n\n'

    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            await bot.send_message(message.chat.id, text[x:x+4096])
    else:
        await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=text, parse_mode='HTML')
    await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"', reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'), parse_mode='HTML')


async def get_questions(message: types.Message):
    text = statement_db.get_questions()
    if text is None:
        text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è'

    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            await bot.send_message(message.chat.id, text[x:x+4096])
    else:
        await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=text, parse_mode='HTML')
    await bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ üåê', reply_markup=inline_markup_back('–ù–∞–∑–∞–¥'), parse_mode='HTML')


@dispatcher.message_handler(state=FSMAdmin.change_statement)
async def change_statement(message: types.Message, state: FSMContext):
    async with state.proxy() as file:
        status = file['status']

    text = '–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ'

    if status == 'questions':
        statement_db.set_questions(message.text)
    elif status == 'requisites':
        statement_db.set_requisites(message.text)
    elif status == 'rate_name':
        async with state.proxy() as file:
            rate = file['rate']
        if rate == 'first':
            statement_db.set_first_rate_name(message.text)
        elif rate == 'second':
            statement_db.set_second_rate_name(message.text)
        elif rate == 'third':
            statement_db.set_third_rate_name(message.text)
    elif status == 'rate_descr':
        async with state.proxy() as file:
            rate = file['rate']
        if rate == 'first':
            statement_db.set_first_rate_descr(message.text)
        elif rate == 'second':
            statement_db.set_second_rate_descr(message.text)
        elif rate == 'third':
            statement_db.set_third_rate_descr(message.text)
    elif status == 'rate_price':
        try:
            price = int(message.text)
        except Exception as e:
            text = '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã'
            await bot.send_message(message.chat.id, text=text, reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'))
            await FSMAdmin.change_statement.set()
        async with state.proxy() as file:
            rate = file['rate']
        if rate == 'first':
            statement_db.set_first_rate_price(message.text)
        elif rate == 'second':
            statement_db.set_second_rate_price(message.text)
        elif rate == 'third':
            statement_db.set_third_rate_price(message.text)
    elif status == 'rate_conditions':
        async with state.proxy() as file:
            rate = file['rate']
        if rate == 'first':
            statement_db.set_first_rate_conditions(message.text)
        elif rate == 'second':
            statement_db.set_second_rate_conditions(message.text)
        elif rate == 'third':
            statement_db.set_third_rate_conditions(message.text)

    await bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
    await send_moderator_menu(message)
    await FSMAdmin.admin_opps.set()


@dispatcher.message_handler(content_types=['text'], state=FSMReply.message)
async def get_request_message(message: types.Message, state: FSMContext):
    numb = ''.join(random.choice(string.digits) for _ in range(random.randrange(8, 16)))

    requests_db.add_request(numb)
    requests_db.set_user_id(numb, message.chat.id)
    requests_db.set_name(numb, users_db.get_name(message.chat.id))

    for i in users_db.get_users_by_admin_right('admin'):
        try:
            text = f'–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ —Å–æ–æ–±–µ—â–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users_db.get_name(message.chat.id)} —Å ChatID <code>{message.chat.id}</code>' + '\n\n'
            text += f'–¢–µ–∫—Å—Ç —Å–æ–æ–±–µ—â–Ω–∏–µ: {message.text}' + '\n\n'
            text += f'ID —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{numb}</code>'
            await bot.send_message(int(i[0]), text, reply_markup=inline_markup_check_request(), parse_mode='HTML')
        except Exception as e:
            print(e)

    text = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è'
    await bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())
    await clear_state(state)
    await send_menu(message)


@dispatcher.message_handler(state=FSMReply.request_id)
async def get_request_id(message: types.Message, state: FSMContext):
    if requests_db.request_exists(message.text):
        async with state.proxy() as file:
            file['request_id'] = message.text

        text = f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {requests_db.get_name(message.text)}'
        await bot.send_message(message.chat.id, text, reply_markup=reply_markup_call_off('–ù–∞–∑–∞–¥'))
        await FSMReply.reply_message.set()
    else:
        await bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=reply_markup_call_off('–ù–∞–∑–∞–¥'))
        await FSMReply.request_id.set()


@dispatcher.message_handler(content_types=['text'], state=FSMReply.reply_message)
async def get_request_message(message: types.Message, state: FSMContext):
    async with state.proxy() as file:
        request_id = file['request_id']

    text = '–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:' + '\n\n'
    text += message.text
    await bot.send_message(chat_id=requests_db.get_user_id(int(request_id)), text=text)

    text = f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {requests_db.get_name(int(request_id))}'
    await bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())
    requests_db.delete_request(request_id)

    await clear_state(state)
    await send_menu(message)


@dispatcher.message_handler(state=FSMReply.payment_id)
async def get_request_id(message: types.Message, state: FSMContext):
    if photos_db.request_exists(message.text):
        async with state.proxy() as file:
            file['request_id'   ] = message.text
        text = '–ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω'
        await bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
        text = f'–ü–ª–∞—Ç–µ–∂ #<code>{message.text}</code>' + '\n'
        text += f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {photos_db.get_name(message.text)}' + '\n\n'
        text += '–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º?'
        await bot.send_message(message.chat.id, text, reply_markup=inline_markup_request_opps(), parse_mode='HTML')
        await FSMReply.choice.set()
    else:
        await bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=reply_markup_call_off('–ù–∞–∑–∞–¥'))
        await FSMReply.payment_id.set()


@dispatcher.callback_query_handler(state=FSMReply.choice)
async def check_request_id(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'approve':
        text = '–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–∞—à –∫–ª–∏–µ–Ω—Ç'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_classify_client())
        await FSMReply.classify.set()
    elif call.data == 'reject':
        async with state.proxy() as file:
            request_id = file['request_id']

        user_id = photos_db.get_user_id(request_id)
        text = f'–í–∞—à –ø–ª–∞—Ç–µ–∂ #<code>{request_id}</code> –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå' + '\n'
        photos_db.delete_request(request_id)
        await bot.send_message(int(user_id), text, parse_mode='HTML')
        await bot.send_message(call.message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ', reply_markup=types.ReplyKeyboardRemove())
        await clear_state(state)
        await send_menu(call.message)


@dispatcher.callback_query_handler(state=FSMReply.classify)
async def classify_client(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        async with state.proxy() as file:
            request_id = file['request_id']

        text = f'#<code>{request_id}</code>\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º?'
        await bot.send_message(call.message.chat.id, text, reply_markup=inline_markup_request_opps(), parse_mode='HTML')
        await FSMReply.choice.set()
    else:
        async with state.proxy() as file:
            request_id = file['request_id']

        user_id = photos_db.get_user_id(request_id)
        users_db.set_type(int(user_id), call.data)
        if call.data == '1b_rate' or call.data == '2b_rate' or call.data == '3b_rate':
            users_db.set_seconds(int(user_id), int(time.time()))
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–æ–±—Ä–µ—Ç–µ—Ä–∏–∏ —Ç–∞—Ä–∏—Ñ–∞'
        await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–ù–∞–∑–∞–¥ '))
        await FSMReply.success_payment.set()


@dispatcher.message_handler(state=FSMReply.success_payment)
async def get_success_message(message: types.Message, state: FSMContext):
    async with state.proxy() as file:
        request_id = file['request_id']
    user_id = photos_db.get_user_id(request_id)
    photos_db.delete_request(request_id)
    text = '–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:' + '\n\n'
    text += message.text
    await bot.send_message(int(user_id), text=text)
    await bot.send_message(message.chat.id, text='–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=types.ReplyKeyboardRemove())
    await clear_state(state)
    await send_menu(message)


async def get_rate_text(call: types.CallbackQuery, name: str, descr: str, price: str, conditions: str):
    text = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:' + '\n'
    if name is None:
        name = '–£ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'
    text += name + '\n\n'
    text += '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:' + '\n'
    if descr is None:
        descr = '–£ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
    text += descr + '\n\n'
    text += '–¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:' + '\n'
    if price is None:
        price = '–£ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç —Ü–µ–Ω—ã'
    text += price + ' ‚ÇΩ' + '\n\n'
    text += '–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞:' + '\n'
    if conditions is None:
        conditions = '–£ –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏'
    text += conditions + '\n\n'
    text += '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥'

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rate_opps())


@dispatcher.callback_query_handler(state=FSMAdmin.get_rate)
async def get_rate(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'first_rate':
        async with state.proxy() as file:
            file['rate'] = 'first'
        await get_rate_text(call, name=statement_db.get_first_rate_name(), descr=statement_db.get_first_rate_descr(), price=statement_db.get_first_rate_price(), conditions=statement_db.get_first_rate_conditions())
        await FSMAdmin.edit_rate.set()
    elif call.data == 'second_rate':
        async with state.proxy() as file:
            file['rate'] = 'second'
        await get_rate_text(call, name=statement_db.get_second_rate_name(), descr=statement_db.get_second_rate_descr(), price=statement_db.get_second_rate_price(), conditions=statement_db.get_second_rate_conditions())
        await FSMAdmin.edit_rate.set()
    elif call.data == 'third_rate':
        async with state.proxy() as file:
            file['rate'] = 'third'
        await get_rate_text(call, name=statement_db.get_third_rate_name(), descr=statement_db.get_third_rate_descr(), price=statement_db.get_third_rate_price(), conditions=statement_db.get_third_rate_conditions())
        await FSMAdmin.edit_rate.set()
    elif call.data == 'back':
        await clear_state(state)
        await edit_to_moderator_menu(call.message)
        await FSMAdmin.admin_opps.set()


@dispatcher.callback_query_handler(state=FSMAdmin.edit_rate)
async def edit_rate(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=inline_markup_rates(statement_db))
        await FSMAdmin.get_rate.set()
    else:
        if call.data == 'edit_name':
            async with state.proxy() as file:
                file['status'] = 'rate_name'
            text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞'
            await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'))
            await FSMAdmin.change_statement.set()
        elif call.data == 'edit_descr':
            async with state.proxy() as file:
                file['status'] = 'rate_descr'
            text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞'
            await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'))
            await FSMAdmin.change_statement.set()
        elif call.data == 'edit_price':
            async with state.proxy() as file:
                file['status'] = 'rate_price'
            text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞'
            await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'))
            await FSMAdmin.change_statement.set()
        elif call.data == 'edit_conditions':
            async with state.proxy() as file:
                file['status'] = 'rate_conditions'
            text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ —Ç–∞—Ä–∏—Ñ–∞'
            await bot.send_message(call.message.chat.id, text=text, reply_markup=reply_markup_call_off('–û—Ç–º–µ–Ω–∞'))
            await FSMAdmin.change_statement.set()


try:
    asyncio.run(executor.start_polling(dispatcher=dispatcher, skip_updates=False))
except Exception as error:
    print(error)


